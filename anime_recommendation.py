# -*- coding: utf-8 -*-
"""Anime_Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1npO70tPpr37qr3d3sTHP9jxihyx4FJgL

**Libraries**
"""

import os
import numpy as np
import pandas as pd
import scipy as sp
import warnings
from statistics import mean

from sklearn.metrics.pairwise import cosine_similarity #ML Model

pd.options.display.max_columns

warnings.filterwarnings("always")
warnings.filterwarnings("ignore")

"""**Preprocessing of Data**"""

from google.colab import drive
drive.mount('/content/drive')

anime_df = pd.read_csv('/content/drive/MyDrive/anime.csv')
anime_df.head()

rating_df = pd.read_csv('/content/drive/MyDrive/rating.csv' ,  on_bad_lines='skip') #on_bad_lines = 'skip' :- this will cause the offending lines to be skipped.
rating_df.head()

"""**Data Shape**"""

print(f"anime set (row, col): {rating_df.shape}")

print(f"anime set (row, col): {anime_df.shape}")

print("Anime:- \n")
print(anime_df.info())
print("\n" , "*"*50 , "\n Rating :- \n" )
print(rating_df.info())

"""**Handling Missing values**"""

print("Anime_id missing values(%) \n")
print(round(anime_df.isnull().sum().sort_values(ascending=False)/len(anime_df.index) , 4)*100)
print("rating missing values(%) \n")
print(round(rating_df.isnull().sum().sort_values(ascending=False)/len(rating_df.index) , 4)*100)

print(anime_df['type'].mode())
print(anime_df['genre'].mode())

round(anime_df['rating'].sum()/len(anime_df['rating'].index),1)

"""deleting anime with rating 0

"""

anime_df = anime_df[~np.isnan(anime_df['rating'])]
anime_df.isnull().sum()

"""filling mode value in genre and type"""

anime_df['genre'] = anime_df['genre'].fillna(
    anime_df['genre'].dropna().mode().values[0]
)

anime_df['type'] = anime_df['type'].fillna(
    anime_df['type'].dropna().mode().values[0]
)

anime_df.isnull().sum()

"""filling NAN in rating in case of -1

"""

rating_df['rating'] = rating_df['rating'].apply(lambda x: np.nan if x==-1 else x)
rating_df.head(20)

#step 1
anime_df = anime_df[anime_df['type']=='TV']

#step 2
rated_anime = rating_df.merge(anime_df, left_on = 'anime_id', right_on = 'anime_id', suffixes= ['_user', ''])

#step 3
rated_anime =rated_anime[['user_id', 'name', 'rating']]

pivot = rated_anime.pivot_table(index=['user_id'], columns=['name'], values='rating')
pivot.head()

pivot_n = pivot.apply(lambda x: (x-np.mean(x))/(np.max(x)-np.min(x)), axis=1)

pivot_n.fillna(0, inplace=True)

pivot_n = pivot_n.T

pivot_n = pivot_n.loc[:, (pivot_n != 0).any(axis=0)]

piv_sparse = sp.sparse.csr_matrix(pivot_n.values)

anime_similarity = cosine_similarity(piv_sparse)

ani_sim_df = pd.DataFrame(anime_similarity, index = pivot_n.index, columns = pivot_n.index)

def anime_recommendation(ani_name):    
    number = 1

    print('Recommended because you watched {}:\n'.format(ani_name))

    for anime in ani_sim_df.sort_values(by = ani_name, ascending = False).index[1:11]:
        print(f'#{number}: {anime}, {round(ani_sim_df[anime][ani_name]*100,2)}% match')
        
        number +=1

anime_recommendation('Death Note')